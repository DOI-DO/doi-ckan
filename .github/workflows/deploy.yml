---
# On push events to the main branch, this workflow will
# push new image, and mark for re-deployment

name: 'Release Approved Build'

on:
  workflow_dispatch:
  push:
    branches:
      - production
  schedule:
    - cron: '27 1 * * 6'

jobs:
  deploy:
    name: deploy
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push ckan image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: doi-ckan
          IMAGE_TAG: ckan
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ckan/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push solr image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: doi-ckan
          IMAGE_TAG: solr
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG solr/
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy latest ckan images
        run: |
          aws ecs update-service --cluster ${{ secrets.CLUSTER }}  --service ${{ secrets.SERVICE }} --force-new-deployment

      - name: Deploy latest solr images
        run: |
          aws ecs update-service --cluster ${{ secrets.CLUSTER }}  --service doi-solr --force-new-deployment
